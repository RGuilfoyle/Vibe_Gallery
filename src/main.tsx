import React, { ErrorBoundary as ReactErrorBoundary } from 'react'
import ReactDOM from 'react-dom/client'
import App from './App.tsx'
import './index.css'
import { Amplify } from 'aws-amplify'

// Use the amplify_outputs.json instead of amplifyconfiguration.json
// This file is generated by Amplify Gen2
import amplifyConfig from '../amplify_outputs.json'

// Configure Amplify
Amplify.configure(amplifyConfig)

// Add error boundary for better error handling
const ErrorFallback = ({ error, resetErrorBoundary }: { error: Error, resetErrorBoundary: () => void }) => {
  return (
    <div role="alert" style={{ 
      padding: '20px', 
      margin: '20px', 
      border: '1px solid #f56565', 
      borderRadius: '5px',
      backgroundColor: '#fff5f5' 
    }}>
      <h2>Something went wrong</h2>
      <pre style={{ whiteSpace: 'pre-wrap' }}>{error.message}</pre>
      <button onClick={resetErrorBoundary} style={{
        padding: '8px 16px',
        backgroundColor: '#3182ce',
        color: 'white',
        border: 'none',
        borderRadius: '4px',
        cursor: 'pointer'
      }}>
        Try again
      </button>
    </div>
  )
}

// Create a simple error boundary component
class ErrorBoundary extends React.Component<
  { children: React.ReactNode, fallback: React.ComponentType<{ error: Error, resetErrorBoundary: () => void }> },
  { hasError: boolean, error: Error | null }
> {
  constructor(props: { children: React.ReactNode, fallback: React.ComponentType<{ error: Error, resetErrorBoundary: () => void }> }) {
    super(props);
    this.state = { hasError: false, error: null };
  }

  static getDerivedStateFromError(error: Error) {
    return { hasError: true, error };
  }

  resetErrorBoundary = () => {
    this.setState({ hasError: false, error: null });
  }

  render() {
    if (this.state.hasError && this.state.error) {
      const FallbackComponent = this.props.fallback;
      return <FallbackComponent error={this.state.error} resetErrorBoundary={this.resetErrorBoundary} />;
    }

    return this.props.children;
  }
}

ReactDOM.createRoot(document.getElementById('root')!).render(
  <React.StrictMode>
    <ErrorBoundary fallback={ErrorFallback}>
      <App />
    </ErrorBoundary>
  </React.StrictMode>,
)
